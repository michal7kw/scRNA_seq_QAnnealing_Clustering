kidney <- RunUMAP(kidney, dim=1:15)
# png(file="../../output/clusters_QA.png", width = 820, height = 480)
# DimPlot(selected, reduction = "umap", group.by="QA") + NoLegend()
# dev.off()
#
# png(file="../../output/clusters_Clasic.png")
# DimPlot(selected, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# dev.off()
par(mfrow = c(1, 2))
DimPlot(selected_a, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(selected_a, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# png(file="../../output/clusters_QA.png", width = 820, height = 480)
# DimPlot(selected, reduction = "umap", group.by="QA") + NoLegend()
# dev.off()
#
# png(file="../../output/clusters_Clasic.png")
# DimPlot(selected, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# dev.off()
par(mfrow = c(1, 2))
DimPlot(selected_a_2, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(selected_a_2, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
reticulate::repl_python()
isSymmetric(selected_a_2_snn)
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
len(G.edges())
reticulate::repl_python()
colors = py$colors
colors = unlist(colors)
selected_a <- AddMetaData(selected_a, metadata=colors, col.name="QA")
DimPlot(selected_a, reduction = "pca", group.by="QA")
colors = py$colors
colors = unlist(colors)
selected_a_2<- AddMetaData(selected_a_2, metadata=colors, col.name="QA")
DimPlot(selected_a_2, reduction = "pca", group.by="QA")
# ------- Find Seurat Clusters -------
kidney <- FindClusters(kidney, verbose = FALSE, resolution = 0.8, algorithm = 1)
kidney <- RunUMAP(kidney, dim=1:15)
# png(file="../../output/clusters_QA.png", width = 820, height = 480)
# DimPlot(selected, reduction = "umap", group.by="QA") + NoLegend()
# dev.off()
#
# png(file="../../output/clusters_Clasic.png")
# DimPlot(selected, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# dev.off()
par(mfrow = c(1, 2))
DimPlot(selected_a, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(selected_a, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# png(file="../../output/clusters_QA.png", width = 820, height = 480)
# DimPlot(selected, reduction = "umap", group.by="QA") + NoLegend()
# dev.off()
#
# png(file="../../output/clusters_Clasic.png")
# DimPlot(selected, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# dev.off()
# png(file="../../output/temp.png")
# DimPlot(selected_a_2, reduction = "umap", group.by="QA") #+ NoLegend()
# dev.off()
par(mfrow = c(1, 2))
DimPlot(selected_a_2, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(selected_a_2, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
isSymmetric(selected_a_2_snn)
# ------- limitation of nodes degrees UNSYMMETRIC -------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
}
library(Matrix)
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
isSymmetric(selected_a_2_snn)
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
# ------- limitation of nodes degrees UNSYMMETRIC -------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
}
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
reticulate::repl_python()
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
isSymmetric(selected_a_2_snn)
# ------- limitation of nodes degrees UNSYMMETRIC -------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
}
isSymmetric(selected_a_2_snn)
not_mutual = matrix(0,n,n)
for (i in 1:n){
not_mutual[i,] <- !(selected_a_2_snn[i,] & selected_a_2_snn[,i])
}
nnzero(not_mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+not_mutual[,i]
}
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
reticulate::repl_python()
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
# ------- limitation of nodes degrees UNSYMMETRIC -------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
}
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
isSymmetric(selected_a_2_snn)
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
reticulate::repl_python()
n = ncol(selected_a_2)
dim(selected_a_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_a_2 <- FindNeighbors(selected_a_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
selected_a_2_snn_temp <- selected_a_2@graphs[["SCT_snn"]]
# selected_a_2_nn_temp <- selected_2@graphs[["SCT_nn"]]
dim(selected_a_2_snn_temp)
selected_a_2_snn <- selected_a_2_snn_temp - diag(nrow=n, ncol=n)
# selected_a_2_nn <- selected_2_nn_temp - diag(n)
# ------- limitation of nodes degrees UNSYMMETRIC -------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
}
# Method 2
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
# Method 2
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
# Method 2
mutual = matrix(0,n,n)
for (i in 1:n){
mutual[i,] <- selected_a_2_snn[i,] & selected_a_2_snn[,i]
}
nnzero(mutual)
selected_a_2_snn_old <- selected_a_2_snn
for (i in 1:n){
selected_a_2_snn[i,] <- selected_a_2_snn_old[i,]+mutual[,i]
}
# ------- limitation of nodes degrees SYMMETRICS-------
for (i in 1:n){
to_delete <- order(selected_a_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_a_2_snn[,i][to_delete] <- integer(n-ord)
selected_a_2_snn[i,][to_delete] <- integer(n-ord)
# selected_a_2_nn[,i][to_delete] <- integer(n-ord)
# selected_a_2_nn[i,][to_delete] <- integer(n-ord)
}
reticulate::repl_python()
colors = py$colors
colors = unlist(colors)
selected_a <- AddMetaData(selected_a, metadata=colors, col.name="QA")
DimPlot(selected_a, reduction = "pca", group.by="QA")
colors = py$colors
colors = unlist(colors)
selected_a_2<- AddMetaData(selected_a_2, metadata=colors, col.name="QA")
DimPlot(selected_a_2, reduction = "pca", group.by="QA")
# ------- Find Seurat Clusters -------
kidney <- FindClusters(kidney, verbose = FALSE, resolution = 0.8, algorithm = 1)
kidney <- RunUMAP(kidney, dim=1:15)
# png(file="../../output/clusters_QA.png", width = 820, height = 480)
# DimPlot(selected, reduction = "umap", group.by="QA") + NoLegend()
# dev.off()
#
# png(file="../../output/clusters_Clasic.png")
# DimPlot(selected, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# dev.off()
par(mfrow = c(1, 2))
DimPlot(selected_a, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(selected_a, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# png(file="../../output/clusters_QA.png", width = 820, height = 480)
# DimPlot(selected, reduction = "umap", group.by="QA") + NoLegend()
# dev.off()
#
# png(file="../../output/clusters_Clasic.png")
# DimPlot(selected, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# dev.off()
# png(file="../../output/temp.png")
# DimPlot(selected_a_2, reduction = "umap", group.by="QA") #+ NoLegend()
# dev.off()
par(mfrow = c(1, 2))
DimPlot(selected_a_2, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(selected_a_2, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
png(file="../../output/temp_extra.png")
DimPlot(selected_a_2, reduction = "umap", group.by="QA") #+ NoLegend()
dev.off()
reticulate::repl_python()
quit
colors2 = py$colors2
colors2 = unlist(colors2)
leng = dim(GetAssayData(selected_b_2))[2]
colors_vec <- integer(leng)
selected_b_2 <- SCTransform(selected_b, vars.to.regress = "percent.mt", method = "glmGamPoi", verbose = FALSE)
selected_b_2 <- RunPCA(selected_b_2, features = VariableFeatures(object = selected_b_2))
n = ncol(selected_b_2)
dim(selected_b_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 15
selected_b_2 <- FindNeighbors(selected_b_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff, verbose = FALSE)
selected_b_2 <- FindClusters(selected_b_2, resolution = 0.04, verbose = FALSE)
selected_b_2 <- RunUMAP(selected_b_2, dims = 1:30, verbose = FALSE)
DimPlot(selected_b_2, label = TRUE, label.size = 3, group.by="seurat_clusters") #+ NoLegend()
DimPlot(selected_b_2, group.by="celltype",repel = TRUE, label = TRUE, label.size = 3) #+ NoLegend()
colors2 = py$colors2
colors2 = unlist(colors2)
leng = dim(GetAssayData(selected_b_2))[2]
colors_vec <- integer(leng)
colors_vec[!!pruned] <- colors2+2
reticulate::repl_python()
library(tidyverse)
library(Seurat)
library(ggplot2)
library(bspec)
library(sctransform)
library(cowplot)
library(gridExtra)
library(dplyr)
library(patchwork)
library(sctransform)
library(glmGamPoi)
library(SeuratDisk)
library("parallel")
# ------- use previously created Seurat object -------
kidney <- readRDS(file = "../../data/kidney_demo_stewart.rds")
kidney[["percent.mt"]] <- PercentageFeatureSet(kidney, pattern = "^MT-")
kidney <- subset(kidney, subset = nFeature_RNA > 203 & nFeature_RNA < 7000 & nCount_RNA > 254 & nCount_RNA < 40000 & percent.mt < 20)
kidney <- SCTransform(kidney, vars.to.regress = "percent.mt", method = "glmGamPoi", verbose = FALSE)
kidney <- RunPCA(kidney, features = VariableFeatures(object = kidney))
kidney <- RunUMAP(kidney, reduction = "pca", dims = 1:10)
DimPlot(kidney, reduction = "umap", group.by="celltype",repel = TRUE, label = TRUE, label.size = 3) + NoLegend()
to_select <- c("NK cell", "NKT cell", "CD8 T cell", "CD4 T cell", "Mast cell")
selected_meta <- is.element(kidney$celltype, to_select)
kidney <- AddMetaData(kidney, metadata=selected_meta, col.name="selected")
selected_b <- subset(x = kidney, subset = selected == TRUE)
ncol(selected_b)
DimPlot(selected_b, group.by="celltype",repel = TRUE, label = TRUE, label.size = 3) #+ NoLegend()
selected_b_2 <- SCTransform(selected_b, vars.to.regress = "percent.mt", method = "glmGamPoi", verbose = FALSE)
selected_b_2 <- RunPCA(selected_b_2, features = VariableFeatures(object = selected_b_2))
n = ncol(selected_b_2)
dim(selected_b_2)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0.067 #1/15
ord = 10
selected_b_2 <- FindNeighbors(selected_b_2, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff, verbose = FALSE)
selected_b_2 <- FindClusters(selected_b_2, resolution = 0.04, verbose = FALSE)
selected_b_2 <- RunUMAP(selected_b_2, dims = 1:30, verbose = FALSE)
DimPlot(selected_b_2, label = TRUE, label.size = 3, group.by="seurat_clusters") #+ NoLegend()
DimPlot(selected_b_2, group.by="celltype",repel = TRUE, label = TRUE, label.size = 3) #+ NoLegend()
selected_b_2_snn_temp <- selected_b_2@graphs[["SCT_snn"]]
dim(selected_b_2_snn_temp)
selected_b_2_snn <- (selected_b_2_snn_temp - diag(nrow=n, ncol=n))
# ------- limitation of nodes degrees -------
for (i in 1:n){
to_delete <- order(selected_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_b_2_snn[,i][to_delete] <- integer(n-ord)
selected_b_2_snn[i,][to_delete] <- integer(n-ord)
}
# ------- limitation of nodes degrees -------
for (i in 1:n){
to_delete <- order(selected_b_2_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_b_2_snn[,i][to_delete] <- integer(n-ord)
selected_b_2_snn[i,][to_delete] <- integer(n-ord)
}
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
selected_2 <- AddMetaData(selected_b_2, metadata=pruned, col.name="QA_pruning")
pruned = py.pruned
pruned = py$pruned
pruned = py$pruned
selected_2 <- AddMetaData(selected_b_2, metadata=pruned, col.name="QA_pruning")
DimPlot(selected_b_2, reduction = "umap", group.by="QA_pruning")
selected_2 <- AddMetaData(selected_b_2, metadata=pruned, col.name="QA_pruning")
pruned = py$pruned
selected_2 <- AddMetaData(selected_b_2, metadata=pruned, col.name="QA_pruning")
```{r}
DimPlot(selected_b_2, reduction = "umap", group.by="QA_pruning")
pruned = py$pruned
selected_b_2 <- AddMetaData(selected_b_2, metadata=pruned, col.name="QA_pruning")
DimPlot(selected_b_2, reduction = "umap", group.by="QA_pruning")
# PRUNIGN THE GRAPH
pruned = py$pruned
pruned = unlist(pruned)
selected_b_2_pruned <- selected_b_2[,!!pruned]
# ------- Process pruned data set -------
selected_b_2_pruned <- SCTransform(selected_b_2_pruned, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
selected_2_pruned <- RunPCA(selected_b_2_pruned, features = VariableFeatures(object = selected_b_2_pruned))
n = ncol(selected_b_2_pruned)
dim(selected_b_2_pruned)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 30
k = 10
coff = 0 #1/15
ord = 10
selected_b_2_pruned <- FindNeighbors(selected_b_2_pruned, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
selected_b_2_pruned_snn <- selected_b_2_pruned@graphs[["SCT_snn"]]
dim(selected_b_2_pruned_snn)
selected_b_2_pruned_snn_temp <- selected_b_2_pruned_snn
selected_b_2_pruned_snn <- (selected_b_2_pruned_snn_temp - diag(nrow=n, ncol=n))
remove(selected_b_2_pruned_snn_temp)
# pbmc3k_QA_pruned_snn <- round(pbmc3k_QA_pruned_snn, digits=2)
# ------- limitation of nodes degrees -------
for (i in 1:n){
to_delete <- order(selected_b_2_pruned_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
selected_b_2_pruned_snn[,i][to_delete] <- integer(n-ord)
selected_b_2_pruned_snn[i,][to_delete] <- integer(n-ord)
}
reticulate::repl_python()
