freq=TRUE,
)
# remove(pbmc3k)
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
library(tidyverse)
library(Seurat)
library(ggplot2)
library(bspec)
library(sctransform)
library(cowplot)
library(gridExtra)
library(dplyr)
library(patchwork)
library(sctransform)
library(glmGamPoi)
library(SeuratDisk)
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "./data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = ".,/../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# ------- Subset the data -------
# cc_pbmc3k_QA <- pbmc3k
# cc_pbmc3k_QA <- pbmc3k[,1:2048]
# cc_pbmc3k_QA <- pbmc3k[,1:1024]
cc_pbmc3k_QA <- pbmc3k[,1:512]
# cc_pbmc3k_QA <- pbmc3k[,1:256]
# cc_pbmc3k_QA <- pbmc3k[,1:128]
cc_pbmc3k_QA <- SCTransform(cc_pbmc3k_QA, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
cc_pbmc3k_QA <- RunPCA(cc_pbmc3k_QA, features = VariableFeatures(object = cc_pbmc3k_QA))
# ------- Neighbors evaluation, SNN -------
n = ncol(cc_pbmc3k_QA)
dim(cc_pbmc3k_QA)
dim = 15
k = 5
coff = 0 #1/15
cc_pbmc3k_QA <- FindNeighbors(cc_pbmc3k_QA, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
colors = py$colors
colors = unlist(colors)
cc_pbmc3k_QA <- AddMetaData(cc_pbmc3k_QA, metadata=colors, col.name="QA")
DimPlot(cc_pbmc3k_QA, reduction = "pca", group.by="QA")
# ------- Find Seurat Clusters -------
cc_pbmc3k_QA <- FindClusters(cc_pbmc3k_QA, verbose = FALSE, resolution = 1.0, algorithm = 1)
cc_pbmc3k_QA <- RunUMAP(cc_pbmc3k_QA, dim=1:15)
png(file="./output/clusters_QA.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") # + NoLegend()
png(file="../../output/clusters_QA.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") # + NoLegend()
dev.off()
png(file="../../output/clusters_Clasic.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
dev.off()
par(mfrow = c(1, 2))
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
Idents(cc_pbmc3k_QA) <- cc_pbmc3k_QA$seurat_clusters
Classic_pbmc3k_QA_markers <- FindAllMarkers(cc_pbmc3k_QA, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0)
Classic_pbmc3k_QA_top_2 <- Classic_pbmc3k_QA_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
print(Classic_pbmc3k_QA_top_2$gene,n=nrow(Classic_pbmc3k_QA_markers$gene))
Idents(cc_pbmc3k_QA) <- cc_pbmc3k_QA$QA
QA_pbmc3k_QA_markers <- FindAllMarkers(cc_pbmc3k_QA, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0)
QA_pbmc3k_QA_top_2 <- QA_pbmc3k_QA_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
print(QA_pbmc3k_QA_top_2$gene,n=nrow(QA_pbmc3k_QA_markers$gene))
png(file="../../output/Classic_markers.png", width = 1920, height = 1080)
FeaturePlot(cc_pbmc3k_QA, features = c(Classic_pbmc3k_QA_top_2$gene)) + ggtitle("Classic_markers")
dev.off()
png(file="../../output/QA_markers.png", width = 1920, height = 1080)
FeaturePlot(cc_pbmc3k_QA, features = c(QA_pbmc3k_QA_top_2$gene)) + ggtitle("QA_markers")
dev.off()
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# ------- Subset the data -------
# cc_pbmc3k_QA <- pbmc3k
# cc_pbmc3k_QA <- pbmc3k[,1:2048]
# cc_pbmc3k_QA <- pbmc3k[,1:1024]
cc_pbmc3k_QA <- pbmc3k[,1:512]
# cc_pbmc3k_QA <- pbmc3k[,1:256]
# cc_pbmc3k_QA <- pbmc3k[,1:128]
cc_pbmc3k_QA <- SCTransform(cc_pbmc3k_QA, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
cc_pbmc3k_QA <- RunPCA(cc_pbmc3k_QA, features = VariableFeatures(object = cc_pbmc3k_QA))
# ------- Neighbors evaluation, SNN -------
n = ncol(cc_pbmc3k_QA)
dim(cc_pbmc3k_QA)
dim = 15
k = 5
coff = 0 #1/15
cc_pbmc3k_QA <- FindNeighbors(cc_pbmc3k_QA, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
reticulate::repl_python()
colors = py$colors
colors = unlist(colors)
cc_pbmc3k_QA <- AddMetaData(cc_pbmc3k_QA, metadata=colors, col.name="QA")
DimPlot(cc_pbmc3k_QA, reduction = "pca", group.by="QA")
# ------- Find Seurat Clusters -------
cc_pbmc3k_QA <- FindClusters(cc_pbmc3k_QA, verbose = FALSE, resolution = 1.0, algorithm = 1)
cc_pbmc3k_QA <- RunUMAP(cc_pbmc3k_QA, dim=1:15)
png(file="../../output/clusters_QA.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") # + NoLegend()
dev.off()
png(file="../../output/clusters_Clasic.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
dev.off()
par(mfrow = c(1, 2))
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
Idents(cc_pbmc3k_QA) <- cc_pbmc3k_QA$seurat_clusters
Classic_pbmc3k_QA_markers <- FindAllMarkers(cc_pbmc3k_QA, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0)
Classic_pbmc3k_QA_top_2 <- Classic_pbmc3k_QA_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
print(Classic_pbmc3k_QA_top_2$gene,n=nrow(Classic_pbmc3k_QA_markers$gene))
Idents(cc_pbmc3k_QA) <- cc_pbmc3k_QA$QA
QA_pbmc3k_QA_markers <- FindAllMarkers(cc_pbmc3k_QA, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0)
QA_pbmc3k_QA_top_2 <- QA_pbmc3k_QA_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
print(QA_pbmc3k_QA_top_2$gene,n=nrow(QA_pbmc3k_QA_markers$gene))
png(file="../../output/Classic_markers.png", width = 1920, height = 1080)
FeaturePlot(cc_pbmc3k_QA, features = c(Classic_pbmc3k_QA_top_2$gene)) + ggtitle("Classic_markers")
dev.off()
png(file="../../output/QA_markers.png", width = 1920, height = 1080)
FeaturePlot(cc_pbmc3k_QA, features = c(QA_pbmc3k_QA_top_2$gene)) + ggtitle("QA_markers")
dev.off()
library(SingleR)
monaco.ref<- celldex::MonacoImmuneData()
sce <- as.SingleCellExperiment(DietSeurat(cc_pbmc3k_QA))
monaco.main_log <- SingleR(test = sce,assay.type.test = 1,ref = monaco.ref,labels = monaco.ref$label.main)
monaco.fine_log <- SingleR(test = sce,assay.type.test = 1,ref = monaco.ref,labels = monaco.ref$label.fine)
table(monaco.main_log$pruned.labels)
table(monaco.fine_log$pruned.labels)
cc_pbmc3k_QA@meta.data$monaco.main <- monaco.main_log$pruned.labels
cc_pbmc3k_QA@meta.data$monaco.fine <- monaco.fine_log$pruned.labels
cc_pbmc3k_QA <- SetIdent(cc_pbmc3k_QA, value = "monaco.main")
png(file="./output/pbmc3k_QA_cell_types_main.png", width = 720, height = 480)
DimPlot(cc_pbmc3k_QA, label = T , repel = T, label.size = 5, group.by="monaco.main") + NoLegend() + ggtitle("pbmc3k_QA_cell_type")
cc_pbmc3k_QA <- SetIdent(cc_pbmc3k_QA, value = "monaco.main")
png(file="../../output/pbmc3k_QA_cell_types_main.png", width = 720, height = 480)
DimPlot(cc_pbmc3k_QA, label = T , repel = T, label.size = 5, group.by="monaco.main") + NoLegend() + ggtitle("pbmc3k_QA_cell_type")
dev.off()
DimPlot(cc_pbmc3k_QA, label = T , repel = T, label.size = 5, group.by="monaco.main") + NoLegend() + ggtitle("pbmc3k_QA_cell_type")
cc_pbmc3k_QA <- SetIdent(cc_pbmc3k_QA, value = "monaco.fine")
png(file="../../output/pbmc3k_QA_cell_types_fine.png", width = 820, height = 480)
DimPlot(cc_pbmc3k_QA, label = F, label.size = 4)  + ggtitle("pbmc3k_QA_cell_type")
dev.off()
DimPlot(cc_pbmc3k_QA, label = F, label.size = 2) + ggtitle("pbmc3k_QA_cell_type")
png(file="../../output/clusters_QA.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") + NoLegend()
dev.off()
png(file="../../output/clusters_QA.png", width = 820, height = 480)
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") + NoLegend()
dev.off()
png(file="../../output/clusters_Clasic.png")
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
dev.off()
par(mfrow = c(1, 2))
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="QA") # + NoLegend()
DimPlot(cc_pbmc3k_QA, reduction = "umap", group.by="seurat_clusters") # + NoLegend()
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# ------- Subset the data -------
# cc_pbmc3k_QA <- pbmc3k
# cc_pbmc3k_QA <- pbmc3k[,1:2048]
# cc_pbmc3k_QA <- pbmc3k[,1:1024]
cc_pbmc3k_QA <- pbmc3k[,1:512]
# cc_pbmc3k_QA <- pbmc3k[,1:256]
# cc_pbmc3k_QA <- pbmc3k[,1:128]
cc_pbmc3k_QA <- SCTransform(cc_pbmc3k_QA, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
cc_pbmc3k_QA <- RunPCA(cc_pbmc3k_QA, features = VariableFeatures(object = cc_pbmc3k_QA))
# ------- Neighbors evaluation, SNN -------
n = ncol(cc_pbmc3k_QA)
dim(cc_pbmc3k_QA)
dim = 15
k = 5
coff = 0 #1/15
cc_pbmc3k_QA <- FindNeighbors(cc_pbmc3k_QA, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "./data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# ------- Subset the data -------
# pbmc3k_QA <- pbmc3k
# pbmc3k_QA <- pbmc3k[,1:2048]
# pbmc3k_QA <- pbmc3k[,1:1024]
pbmc3k_QA <- pbmc3k[,1:512]
# pbmc3k_QA <- pbmc3k[,1:256]
# pbmc3k_QA <- pbmc3k[,1:128]
pbmc3k_QA <- SCTransform(pbmc3k_QA, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
pbmc3k_QA <- RunPCA(pbmc3k_QA, features = VariableFeatures(object = pbmc3k_QA))
n = ncol(pbmc3k_QA)
dim(pbmc3k_QA)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 15
k = 5
coff = 0 #1/15
ord = 10
pbmc3k_QA <- FindNeighbors(pbmc3k_QA, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
pbmc3k_QA_snn_temp <- pbmc3k_QA@graphs[["SCT_snn"]]
dim(pbmc3k_QA_snn_temp)
pbmc3k_QA_snn <- pbmc3k_QA_snn_temp - diag(n)
n = ncol(pbmc3k_QA)
dim(pbmc3k_QA)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 1
dim = 15
k = 5
coff = 0 #1/15
ord = 10
pbmc3k_QA <- FindNeighbors(pbmc3k_QA, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
pbmc3k_QA_snn_temp <- pbmc3k_QA@graphs[["SCT_snn"]]
dim(pbmc3k_QA_snn_temp)
pbmc3k_QA_snn <- pbmc3k_QA_snn_temp - diag(n)
reticulate::repl_python()
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
library(tidyverse)
library(Seurat)
library(ggplot2)
library(bspec)
library(sctransform)
library(cowplot)
library(gridExtra)
library(dplyr)
library(patchwork)
library(sctransform)
library(glmGamPoi)
library(SeuratDisk)
# ------- use previously created Seurat object -------
kidney <- readRDS(file = "../../data/kidney_demo_stewart.rds")
# ------- use processed ones, with mt regress -------
# kidney <- readRDS(file = "../data/kidney_data/kidney_mt_regress.rds")
# kidney_snn <- readRDS(file = "../data/kidney_data/kidney_mt_snn_regress.rds")
# ------- use processed ones, without mt regress -------
# kidney <- readRDS(file = "../data/kidney_data/kidney.rds")
# kidney_snn <- readRDS(file = "../data/kidney_data/kidney_snn.rds")
# kidney[["percent.mt"]] <- PercentageFeatureSet(kidney, pattern = "^MT-")
# kidney <- subset(kidney, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 20)
# kidney <- SCTransform(kidney, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
kidney <- SCTransform(kidney, method = "glmGamPoi", verbose = FALSE)
kidney <- RunPCA(kidney, features = VariableFeatures(object = kidney))
# kidney <- subset(kidney, subset = nFeature_RNA > 200 & nFeature_RNA < 1500 & nCount_RNA < 7000) # for 1024 size
kidney <- subset(kidney, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & nCount_RNA < 22000) # for 1024 size
kidney[["kidney_general"]] <- "kidney_cells"
VlnPlot(kidney, features = c("nFeature_RNA", "nCount_RNA"), group.by = "kidney_general", ncol = 3)
plot1 <- FeatureScatter(kidney, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "kidney_general")
plot1
ncol(kidney)
n = ncol(kidney)
dim(kidney)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 15
k = 5
coff = 0.2 #1/15
ord = 15
kidney <- FindNeighbors(kidney, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff) #prune.SNN=coff
kidney_snn_temp <- kidney@graphs[["SCT_snn"]]
kidney_nn_temp <- kidney@graphs[["SCT_nn"]]
dim(kidney_snn_temp)
kidney_snn <- kidney_snn_temp - diag(n)
kidney_nn <- kidney_nn_temp - diag(n)
# ------- limitation of nodes degrees -------
kidney_snn_old <- kidney_snn
for (i in 1:n){
kidney_snn[i,] <- kidney_snn_old[i,]+kidney_snn_old[,i]
}
for (i in 1:n){
to_delete <- order(kidney_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
kidney_snn[,i][to_delete] <- integer(n-ord)
kidney_snn[i,][to_delete] <- integer(n-ord)
kidney_nn[,i][to_delete] <- integer(n-ord)
kidney_nn[i,][to_delete] <- integer(n-ord)
}
n = ncol(kidney)
dim(kidney)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 15
k = 5
coff = 0.2 #1/15
ord = 15
kidney <- FindNeighbors(kidney, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE, prune.SNN=coff)
kidney_snn_temp <- kidney@graphs[["SCT_snn"]]
kidney_nn_temp <- kidney@graphs[["SCT_nn"]]
dim(kidney_snn_temp)
kidney_snn <- kidney_snn_temp - diag(n)
kidney_nn <- kidney_nn_temp - diag(n)
# ------- limitation of nodes degrees -------
kidney_snn_old <- kidney_snn
for (i in 1:n){
kidney_snn[i,] <- kidney_snn_old[i,]+kidney_snn_old[,i]
}
seq(ord+1,n,1)
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
quit
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# PRUNIGN THE GRAPH
pruned = py$pruned
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# PRUNIGN THE GRAPH
pruned = py$pruned
pruned = unlist(pruned)
# pbmc3k_QA <- pbmc3k
pbmc3k_QA_pd <- pbmc3k[,1:1024]
pbmc3k_QA_pruned <- pbmc3k_QA_pd[,!!pruned]
# ------- Process original data set -------
pbmc3k_QA_pd <- SCTransform(pbmc3k_QA_pd, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
pbmc3k_QA_pd <- RunPCA(pbmc3k_QA_pd, features = VariableFeatures(object = pbmc3k_QA_pd))
# ------- Process pruned data set -------
pbmc3k_QA_pruned <- SCTransform(pbmc3k_QA_pruned, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
pbmc3k_QA_pruned <- RunPCA(pbmc3k_QA_pruned, features = VariableFeatures(object = pbmc3k_QA_pruned))
n = ncol(pbmc3k_QA_pruned)
dim(pbmc3k_QA_pruned)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 15
k = 5
coff = 0 #1/15
ord = 15
pbmc3k_QA_pd <- FindNeighbors(pbmc3k_QA_pd, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
pbmc3k_QA_pruned <- FindNeighbors(pbmc3k_QA_pruned, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
pbmc3k_QA_pruned_snn <- pbmc3k_QA_pruned@graphs[["SCT_snn"]]
dim(pbmc3k_QA_pruned_snn)
pbmc3k_QA_pruned_snn_temp <- pbmc3k_QA_pruned_snn
pbmc3k_QA_pruned_snn <- pbmc3k_QA_pruned_snn_temp - diag(n)
remove(pbmc3k_QA_pruned_snn_temp)
# ------- limitation of nodes degrees -------
# for (i in 1:n){
#   to_delete <- order(pbmc3k_QA_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
#   pbmc3k_QA_snn[,i][to_delete] <- integer(n-ord)
#   pbmc3k_QA_snn[i,][to_delete] <- integer(n-ord)
# }
pbmc3k_QA_pruned_snn <- round(pbmc3k_QA_pruned_snn, digits=2)
pbmc3k_QA_pd <- AddMetaData(pbmc3k_QA_pd, metadata=pruned, col.name="QA_pruning")
pbmc3k_QA_pd <- RunUMAP(pbmc3k_QA_pd, dim=1:15)
DimPlot(pbmc3k_QA_pd, reduction = "umap", group.by="QA_pruning")
# ------- Enhance shared edges (may want to repeat multiple times) -------
pbmc3k_QA_pruned_snn_old <- pbmc3k_QA_pruned_snn
for (i in 1:n){
pbmc3k_QA_pruned_snn[i,] <- pbmc3k_QA_pruned_snn_old[i,]+pbmc3k_QA_pruned_snn_old[,i]
}
# ------- limitation of nodes degrees -------
for (i in 1:n){
to_delete <- order(pbmc3k_QA_pruned_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
pbmc3k_QA_pruned_snn[,i][to_delete] <- integer(n-ord)
pbmc3k_QA_pruned_snn[i,][to_delete] <- integer(n-ord)
}
mean(as.matrix(pbmc3k_QA_pruned_snn))
mean(as.matrix(pbmc3k_QA_pruned_snn_old))
remove(pbmc3k_QA_pruned_snn_old)
reticulate::repl_python()
knitr::include_graphics(py$file_name)
reticulate::repl_python()
library(tidyverse)
library(Seurat)
library(ggplot2)
library(bspec)
library(sctransform)
library(cowplot)
library(gridExtra)
library(dplyr)
library(patchwork)
library(sctransform)
library(glmGamPoi)
library(reticulate)
virtualenv_create("scrna_proj")
# py_install(c("networkx","matplotlib"), envname = "scrna_proj")
use_virtualenv("scrna_proj")
reticulate::repl_python()
# ------- use previously created Seurat object -------
# pbmc3k <- readRDS(file = "data/pbmc_data/pbmc3k/pbmc3k_init.rds")
# ----- Load new PBMC dataset -----
pbmc.data <- Read10X(data.dir = "../../data/pbmc_data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# ------- Initialize the Seurat object with the raw (non-normalized data) -------
pbmc3k <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
pbmc3k <- subset(pbmc3k, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# PRUNIGN THE GRAPH
pruned = py$pruned
pruned = unlist(pruned)
# pbmc3k_QA <- pbmc3k
pbmc3k_QA_pd <- pbmc3k[,1:1024]
pbmc3k_QA_pruned <- pbmc3k_QA_pd[,!!pruned]
# ------- Process original data set -------
pbmc3k_QA_pd <- SCTransform(pbmc3k_QA_pd, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
pbmc3k_QA_pd <- RunPCA(pbmc3k_QA_pd, features = VariableFeatures(object = pbmc3k_QA_pd))
# ------- Process pruned data set -------
pbmc3k_QA_pruned <- SCTransform(pbmc3k_QA_pruned, method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
pbmc3k_QA_pruned <- RunPCA(pbmc3k_QA_pruned, features = VariableFeatures(object = pbmc3k_QA_pruned))
n = ncol(pbmc3k_QA_pruned)
dim(pbmc3k_QA_pruned)
type = c("_", "_trimmed_", "_negedges_", "_trimmed_negedges_")
id_type = 2
dim = 15
k = 15
coff = 0 #1/15
ord = 15
pbmc3k_QA_pd <- FindNeighbors(pbmc3k_QA_pd, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
pbmc3k_QA_pruned <- FindNeighbors(pbmc3k_QA_pruned, reduction = "pca", dims = 1:dim, k.param=k, compute.SNN=TRUE) #prune.SNN=coff
pbmc3k_QA_pruned_snn <- pbmc3k_QA_pruned@graphs[["SCT_snn"]]
dim(pbmc3k_QA_pruned_snn)
pbmc3k_QA_pruned_snn_temp <- pbmc3k_QA_pruned_snn
pbmc3k_QA_pruned_snn <- pbmc3k_QA_pruned_snn_temp - diag(n)
remove(pbmc3k_QA_pruned_snn_temp)
# ------- limitation of nodes degrees -------
# for (i in 1:n){
#   to_delete <- order(pbmc3k_QA_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
#   pbmc3k_QA_snn[,i][to_delete] <- integer(n-ord)
#   pbmc3k_QA_snn[i,][to_delete] <- integer(n-ord)
# }
pbmc3k_QA_pruned_snn <- round(pbmc3k_QA_pruned_snn, digits=2)
pbmc3k_QA_pd <- AddMetaData(pbmc3k_QA_pd, metadata=pruned, col.name="QA_pruning")
pbmc3k_QA_pd <- RunUMAP(pbmc3k_QA_pd, dim=1:15)
DimPlot(pbmc3k_QA_pd, reduction = "umap", group.by="QA_pruning")
# ------- Enhance shared edges (may want to repeat multiple times) -------
pbmc3k_QA_pruned_snn_old <- pbmc3k_QA_pruned_snn
for (i in 1:n){
pbmc3k_QA_pruned_snn[i,] <- pbmc3k_QA_pruned_snn_old[i,]+pbmc3k_QA_pruned_snn_old[,i]
}
# ------- limitation of nodes degrees -------
for (i in 1:n){
to_delete <- order(pbmc3k_QA_pruned_snn[,i], decreasing = TRUE)[seq(ord+1,n,1)]
pbmc3k_QA_pruned_snn[,i][to_delete] <- integer(n-ord)
pbmc3k_QA_pruned_snn[i,][to_delete] <- integer(n-ord)
}
mean(as.matrix(pbmc3k_QA_pruned_snn))
mean(as.matrix(pbmc3k_QA_pruned_snn_old))
remove(pbmc3k_QA_pruned_snn_old)
reticulate::repl_python()
